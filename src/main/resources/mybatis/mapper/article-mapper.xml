<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.honey.simpleblog.mapper.ArticleMapper">

    <resultMap id="ArticleResultMap" type="Article">
        <id property="id" column="id"></id>
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="username" column="username" />
        <result property="createdAt" column="created_at" />
    </resultMap>

    <select id="findByLimitAndOffset" resultType="com.honey.simpleblog.dto.ArticleResponseDto">
        select a.id, u.login_id, a.title, a.content, u.name
        from article a
        join user_account u
        on a.user_account_id = u.login_id
        order by id desc
        limit #{limit} offset #{offset}
    </select>

    <select id="findById" resultType="com.honey.simpleblog.dto.ArticleResponseDto">
        select a.id, u.login_id, a.title, a.content, u.name
        from article a
        join user_account u
        on a.user_account_id = u.login_id
        where a.id = #{id}
    </select>

    <insert id="save">
        insert into article(user_account_id, title, content, created_at)
        values (#{article.userAccountId}, #{article.title}, #{article.content}, #{article.createdAt});
    </insert>

    <select id="findUserAccountIdById" resultType="java.lang.String">
        select a.user_account_id
        from Article a
        where a.id = #{id}
    </select>

    <update id="update">
        update article
        set title=#{article.title}, content=#{article.content}
        where id=#{article.id}
    </update>

    <delete id="delete">
        delete from article
        where id=#{id}
    </delete>
</mapper>
